// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Khmer495/okan_yohou/internal/pkg/ent/alert"
	"github.com/Khmer495/okan_yohou/internal/pkg/ent/predicate"
)

// AlertUpdate is the builder for updating Alert entities.
type AlertUpdate struct {
	config
	hooks    []Hook
	mutation *AlertMutation
}

// Where appends a list predicates to the AlertUpdate builder.
func (au *AlertUpdate) Where(ps ...predicate.Alert) *AlertUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AlertUpdate) SetDeletedAt(t time.Time) *AlertUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AlertUpdate) SetNillableDeletedAt(t *time.Time) *AlertUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AlertUpdate) ClearDeletedAt() *AlertUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetTitle sets the "title" field.
func (au *AlertUpdate) SetTitle(s string) *AlertUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetLat sets the "lat" field.
func (au *AlertUpdate) SetLat(f float32) *AlertUpdate {
	au.mutation.ResetLat()
	au.mutation.SetLat(f)
	return au
}

// AddLat adds f to the "lat" field.
func (au *AlertUpdate) AddLat(f float32) *AlertUpdate {
	au.mutation.AddLat(f)
	return au
}

// SetLon sets the "lon" field.
func (au *AlertUpdate) SetLon(f float32) *AlertUpdate {
	au.mutation.ResetLon()
	au.mutation.SetLon(f)
	return au
}

// AddLon adds f to the "lon" field.
func (au *AlertUpdate) AddLon(f float32) *AlertUpdate {
	au.mutation.AddLon(f)
	return au
}

// SetWx sets the "wx" field.
func (au *AlertUpdate) SetWx(i int) *AlertUpdate {
	au.mutation.ResetWx()
	au.mutation.SetWx(i)
	return au
}

// SetNillableWx sets the "wx" field if the given value is not nil.
func (au *AlertUpdate) SetNillableWx(i *int) *AlertUpdate {
	if i != nil {
		au.SetWx(*i)
	}
	return au
}

// AddWx adds i to the "wx" field.
func (au *AlertUpdate) AddWx(i int) *AlertUpdate {
	au.mutation.AddWx(i)
	return au
}

// ClearWx clears the value of the "wx" field.
func (au *AlertUpdate) ClearWx() *AlertUpdate {
	au.mutation.ClearWx()
	return au
}

// SetTemp sets the "temp" field.
func (au *AlertUpdate) SetTemp(f float32) *AlertUpdate {
	au.mutation.ResetTemp()
	au.mutation.SetTemp(f)
	return au
}

// SetNillableTemp sets the "temp" field if the given value is not nil.
func (au *AlertUpdate) SetNillableTemp(f *float32) *AlertUpdate {
	if f != nil {
		au.SetTemp(*f)
	}
	return au
}

// AddTemp adds f to the "temp" field.
func (au *AlertUpdate) AddTemp(f float32) *AlertUpdate {
	au.mutation.AddTemp(f)
	return au
}

// ClearTemp clears the value of the "temp" field.
func (au *AlertUpdate) ClearTemp() *AlertUpdate {
	au.mutation.ClearTemp()
	return au
}

// SetArpress sets the "arpress" field.
func (au *AlertUpdate) SetArpress(i int) *AlertUpdate {
	au.mutation.ResetArpress()
	au.mutation.SetArpress(i)
	return au
}

// SetNillableArpress sets the "arpress" field if the given value is not nil.
func (au *AlertUpdate) SetNillableArpress(i *int) *AlertUpdate {
	if i != nil {
		au.SetArpress(*i)
	}
	return au
}

// AddArpress adds i to the "arpress" field.
func (au *AlertUpdate) AddArpress(i int) *AlertUpdate {
	au.mutation.AddArpress(i)
	return au
}

// ClearArpress clears the value of the "arpress" field.
func (au *AlertUpdate) ClearArpress() *AlertUpdate {
	au.mutation.ClearArpress()
	return au
}

// SetWndspd sets the "wndspd" field.
func (au *AlertUpdate) SetWndspd(i int) *AlertUpdate {
	au.mutation.ResetWndspd()
	au.mutation.SetWndspd(i)
	return au
}

// SetNillableWndspd sets the "wndspd" field if the given value is not nil.
func (au *AlertUpdate) SetNillableWndspd(i *int) *AlertUpdate {
	if i != nil {
		au.SetWndspd(*i)
	}
	return au
}

// AddWndspd adds i to the "wndspd" field.
func (au *AlertUpdate) AddWndspd(i int) *AlertUpdate {
	au.mutation.AddWndspd(i)
	return au
}

// ClearWndspd clears the value of the "wndspd" field.
func (au *AlertUpdate) ClearWndspd() *AlertUpdate {
	au.mutation.ClearWndspd()
	return au
}

// SetRhum sets the "rhum" field.
func (au *AlertUpdate) SetRhum(i int) *AlertUpdate {
	au.mutation.ResetRhum()
	au.mutation.SetRhum(i)
	return au
}

// SetNillableRhum sets the "rhum" field if the given value is not nil.
func (au *AlertUpdate) SetNillableRhum(i *int) *AlertUpdate {
	if i != nil {
		au.SetRhum(*i)
	}
	return au
}

// AddRhum adds i to the "rhum" field.
func (au *AlertUpdate) AddRhum(i int) *AlertUpdate {
	au.mutation.AddRhum(i)
	return au
}

// ClearRhum clears the value of the "rhum" field.
func (au *AlertUpdate) ClearRhum() *AlertUpdate {
	au.mutation.ClearRhum()
	return au
}

// SetFeeltmp sets the "feeltmp" field.
func (au *AlertUpdate) SetFeeltmp(i int) *AlertUpdate {
	au.mutation.ResetFeeltmp()
	au.mutation.SetFeeltmp(i)
	return au
}

// SetNillableFeeltmp sets the "feeltmp" field if the given value is not nil.
func (au *AlertUpdate) SetNillableFeeltmp(i *int) *AlertUpdate {
	if i != nil {
		au.SetFeeltmp(*i)
	}
	return au
}

// AddFeeltmp adds i to the "feeltmp" field.
func (au *AlertUpdate) AddFeeltmp(i int) *AlertUpdate {
	au.mutation.AddFeeltmp(i)
	return au
}

// ClearFeeltmp clears the value of the "feeltmp" field.
func (au *AlertUpdate) ClearFeeltmp() *AlertUpdate {
	au.mutation.ClearFeeltmp()
	return au
}

// SetText sets the "text" field.
func (au *AlertUpdate) SetText(s string) *AlertUpdate {
	au.mutation.SetText(s)
	return au
}

// Mutation returns the AlertMutation object of the builder.
func (au *AlertUpdate) Mutation() *AlertMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AlertUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlertMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AlertUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AlertUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AlertUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AlertUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := alert.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AlertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alert.Table,
			Columns: alert.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: alert.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alert.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alert.FieldDeletedAt,
		})
	}
	if au.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: alert.FieldDeletedAt,
		})
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldTitle,
		})
	}
	if value, ok := au.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: alert.FieldLat,
		})
	}
	if value, ok := au.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: alert.FieldLat,
		})
	}
	if value, ok := au.mutation.Lon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: alert.FieldLon,
		})
	}
	if value, ok := au.mutation.AddedLon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: alert.FieldLon,
		})
	}
	if value, ok := au.mutation.Wx(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldWx,
		})
	}
	if value, ok := au.mutation.AddedWx(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldWx,
		})
	}
	if au.mutation.WxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: alert.FieldWx,
		})
	}
	if value, ok := au.mutation.Temp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: alert.FieldTemp,
		})
	}
	if value, ok := au.mutation.AddedTemp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: alert.FieldTemp,
		})
	}
	if au.mutation.TempCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Column: alert.FieldTemp,
		})
	}
	if value, ok := au.mutation.Arpress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldArpress,
		})
	}
	if value, ok := au.mutation.AddedArpress(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldArpress,
		})
	}
	if au.mutation.ArpressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: alert.FieldArpress,
		})
	}
	if value, ok := au.mutation.Wndspd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldWndspd,
		})
	}
	if value, ok := au.mutation.AddedWndspd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldWndspd,
		})
	}
	if au.mutation.WndspdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: alert.FieldWndspd,
		})
	}
	if value, ok := au.mutation.Rhum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldRhum,
		})
	}
	if value, ok := au.mutation.AddedRhum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldRhum,
		})
	}
	if au.mutation.RhumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: alert.FieldRhum,
		})
	}
	if value, ok := au.mutation.Feeltmp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldFeeltmp,
		})
	}
	if value, ok := au.mutation.AddedFeeltmp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldFeeltmp,
		})
	}
	if au.mutation.FeeltmpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: alert.FieldFeeltmp,
		})
	}
	if value, ok := au.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldText,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AlertUpdateOne is the builder for updating a single Alert entity.
type AlertUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AlertMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AlertUpdateOne) SetDeletedAt(t time.Time) *AlertUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableDeletedAt(t *time.Time) *AlertUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AlertUpdateOne) ClearDeletedAt() *AlertUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetTitle sets the "title" field.
func (auo *AlertUpdateOne) SetTitle(s string) *AlertUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetLat sets the "lat" field.
func (auo *AlertUpdateOne) SetLat(f float32) *AlertUpdateOne {
	auo.mutation.ResetLat()
	auo.mutation.SetLat(f)
	return auo
}

// AddLat adds f to the "lat" field.
func (auo *AlertUpdateOne) AddLat(f float32) *AlertUpdateOne {
	auo.mutation.AddLat(f)
	return auo
}

// SetLon sets the "lon" field.
func (auo *AlertUpdateOne) SetLon(f float32) *AlertUpdateOne {
	auo.mutation.ResetLon()
	auo.mutation.SetLon(f)
	return auo
}

// AddLon adds f to the "lon" field.
func (auo *AlertUpdateOne) AddLon(f float32) *AlertUpdateOne {
	auo.mutation.AddLon(f)
	return auo
}

// SetWx sets the "wx" field.
func (auo *AlertUpdateOne) SetWx(i int) *AlertUpdateOne {
	auo.mutation.ResetWx()
	auo.mutation.SetWx(i)
	return auo
}

// SetNillableWx sets the "wx" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableWx(i *int) *AlertUpdateOne {
	if i != nil {
		auo.SetWx(*i)
	}
	return auo
}

// AddWx adds i to the "wx" field.
func (auo *AlertUpdateOne) AddWx(i int) *AlertUpdateOne {
	auo.mutation.AddWx(i)
	return auo
}

// ClearWx clears the value of the "wx" field.
func (auo *AlertUpdateOne) ClearWx() *AlertUpdateOne {
	auo.mutation.ClearWx()
	return auo
}

// SetTemp sets the "temp" field.
func (auo *AlertUpdateOne) SetTemp(f float32) *AlertUpdateOne {
	auo.mutation.ResetTemp()
	auo.mutation.SetTemp(f)
	return auo
}

// SetNillableTemp sets the "temp" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableTemp(f *float32) *AlertUpdateOne {
	if f != nil {
		auo.SetTemp(*f)
	}
	return auo
}

// AddTemp adds f to the "temp" field.
func (auo *AlertUpdateOne) AddTemp(f float32) *AlertUpdateOne {
	auo.mutation.AddTemp(f)
	return auo
}

// ClearTemp clears the value of the "temp" field.
func (auo *AlertUpdateOne) ClearTemp() *AlertUpdateOne {
	auo.mutation.ClearTemp()
	return auo
}

// SetArpress sets the "arpress" field.
func (auo *AlertUpdateOne) SetArpress(i int) *AlertUpdateOne {
	auo.mutation.ResetArpress()
	auo.mutation.SetArpress(i)
	return auo
}

// SetNillableArpress sets the "arpress" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableArpress(i *int) *AlertUpdateOne {
	if i != nil {
		auo.SetArpress(*i)
	}
	return auo
}

// AddArpress adds i to the "arpress" field.
func (auo *AlertUpdateOne) AddArpress(i int) *AlertUpdateOne {
	auo.mutation.AddArpress(i)
	return auo
}

// ClearArpress clears the value of the "arpress" field.
func (auo *AlertUpdateOne) ClearArpress() *AlertUpdateOne {
	auo.mutation.ClearArpress()
	return auo
}

// SetWndspd sets the "wndspd" field.
func (auo *AlertUpdateOne) SetWndspd(i int) *AlertUpdateOne {
	auo.mutation.ResetWndspd()
	auo.mutation.SetWndspd(i)
	return auo
}

// SetNillableWndspd sets the "wndspd" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableWndspd(i *int) *AlertUpdateOne {
	if i != nil {
		auo.SetWndspd(*i)
	}
	return auo
}

// AddWndspd adds i to the "wndspd" field.
func (auo *AlertUpdateOne) AddWndspd(i int) *AlertUpdateOne {
	auo.mutation.AddWndspd(i)
	return auo
}

// ClearWndspd clears the value of the "wndspd" field.
func (auo *AlertUpdateOne) ClearWndspd() *AlertUpdateOne {
	auo.mutation.ClearWndspd()
	return auo
}

// SetRhum sets the "rhum" field.
func (auo *AlertUpdateOne) SetRhum(i int) *AlertUpdateOne {
	auo.mutation.ResetRhum()
	auo.mutation.SetRhum(i)
	return auo
}

// SetNillableRhum sets the "rhum" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableRhum(i *int) *AlertUpdateOne {
	if i != nil {
		auo.SetRhum(*i)
	}
	return auo
}

// AddRhum adds i to the "rhum" field.
func (auo *AlertUpdateOne) AddRhum(i int) *AlertUpdateOne {
	auo.mutation.AddRhum(i)
	return auo
}

// ClearRhum clears the value of the "rhum" field.
func (auo *AlertUpdateOne) ClearRhum() *AlertUpdateOne {
	auo.mutation.ClearRhum()
	return auo
}

// SetFeeltmp sets the "feeltmp" field.
func (auo *AlertUpdateOne) SetFeeltmp(i int) *AlertUpdateOne {
	auo.mutation.ResetFeeltmp()
	auo.mutation.SetFeeltmp(i)
	return auo
}

// SetNillableFeeltmp sets the "feeltmp" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableFeeltmp(i *int) *AlertUpdateOne {
	if i != nil {
		auo.SetFeeltmp(*i)
	}
	return auo
}

// AddFeeltmp adds i to the "feeltmp" field.
func (auo *AlertUpdateOne) AddFeeltmp(i int) *AlertUpdateOne {
	auo.mutation.AddFeeltmp(i)
	return auo
}

// ClearFeeltmp clears the value of the "feeltmp" field.
func (auo *AlertUpdateOne) ClearFeeltmp() *AlertUpdateOne {
	auo.mutation.ClearFeeltmp()
	return auo
}

// SetText sets the "text" field.
func (auo *AlertUpdateOne) SetText(s string) *AlertUpdateOne {
	auo.mutation.SetText(s)
	return auo
}

// Mutation returns the AlertMutation object of the builder.
func (auo *AlertUpdateOne) Mutation() *AlertMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AlertUpdateOne) Select(field string, fields ...string) *AlertUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Alert entity.
func (auo *AlertUpdateOne) Save(ctx context.Context) (*Alert, error) {
	var (
		err  error
		node *Alert
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlertMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AlertUpdateOne) SaveX(ctx context.Context) *Alert {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AlertUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AlertUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AlertUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := alert.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AlertUpdateOne) sqlSave(ctx context.Context) (_node *Alert, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alert.Table,
			Columns: alert.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: alert.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Alert.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, alert.FieldID)
		for _, f := range fields {
			if !alert.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != alert.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alert.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alert.FieldDeletedAt,
		})
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: alert.FieldDeletedAt,
		})
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldTitle,
		})
	}
	if value, ok := auo.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: alert.FieldLat,
		})
	}
	if value, ok := auo.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: alert.FieldLat,
		})
	}
	if value, ok := auo.mutation.Lon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: alert.FieldLon,
		})
	}
	if value, ok := auo.mutation.AddedLon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: alert.FieldLon,
		})
	}
	if value, ok := auo.mutation.Wx(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldWx,
		})
	}
	if value, ok := auo.mutation.AddedWx(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldWx,
		})
	}
	if auo.mutation.WxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: alert.FieldWx,
		})
	}
	if value, ok := auo.mutation.Temp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: alert.FieldTemp,
		})
	}
	if value, ok := auo.mutation.AddedTemp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: alert.FieldTemp,
		})
	}
	if auo.mutation.TempCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Column: alert.FieldTemp,
		})
	}
	if value, ok := auo.mutation.Arpress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldArpress,
		})
	}
	if value, ok := auo.mutation.AddedArpress(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldArpress,
		})
	}
	if auo.mutation.ArpressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: alert.FieldArpress,
		})
	}
	if value, ok := auo.mutation.Wndspd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldWndspd,
		})
	}
	if value, ok := auo.mutation.AddedWndspd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldWndspd,
		})
	}
	if auo.mutation.WndspdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: alert.FieldWndspd,
		})
	}
	if value, ok := auo.mutation.Rhum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldRhum,
		})
	}
	if value, ok := auo.mutation.AddedRhum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldRhum,
		})
	}
	if auo.mutation.RhumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: alert.FieldRhum,
		})
	}
	if value, ok := auo.mutation.Feeltmp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldFeeltmp,
		})
	}
	if value, ok := auo.mutation.AddedFeeltmp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldFeeltmp,
		})
	}
	if auo.mutation.FeeltmpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: alert.FieldFeeltmp,
		})
	}
	if value, ok := auo.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldText,
		})
	}
	_node = &Alert{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
