// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Khmer495/okan_yohou/internal/pkg/ent/alert"
)

// AlertCreate is the builder for creating a Alert entity.
type AlertCreate struct {
	config
	mutation *AlertMutation
	hooks    []Hook
}

// SetUlid sets the "ulid" field.
func (ac *AlertCreate) SetUlid(s string) *AlertCreate {
	ac.mutation.SetUlid(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AlertCreate) SetCreatedAt(t time.Time) *AlertCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AlertCreate) SetNillableCreatedAt(t *time.Time) *AlertCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AlertCreate) SetUpdatedAt(t time.Time) *AlertCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AlertCreate) SetNillableUpdatedAt(t *time.Time) *AlertCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AlertCreate) SetDeletedAt(t time.Time) *AlertCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AlertCreate) SetNillableDeletedAt(t *time.Time) *AlertCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetTitle sets the "title" field.
func (ac *AlertCreate) SetTitle(s string) *AlertCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetLat sets the "lat" field.
func (ac *AlertCreate) SetLat(f float64) *AlertCreate {
	ac.mutation.SetLat(f)
	return ac
}

// SetLon sets the "lon" field.
func (ac *AlertCreate) SetLon(f float64) *AlertCreate {
	ac.mutation.SetLon(f)
	return ac
}

// SetWx sets the "wx" field.
func (ac *AlertCreate) SetWx(i int) *AlertCreate {
	ac.mutation.SetWx(i)
	return ac
}

// SetNillableWx sets the "wx" field if the given value is not nil.
func (ac *AlertCreate) SetNillableWx(i *int) *AlertCreate {
	if i != nil {
		ac.SetWx(*i)
	}
	return ac
}

// SetTemp sets the "temp" field.
func (ac *AlertCreate) SetTemp(f float64) *AlertCreate {
	ac.mutation.SetTemp(f)
	return ac
}

// SetNillableTemp sets the "temp" field if the given value is not nil.
func (ac *AlertCreate) SetNillableTemp(f *float64) *AlertCreate {
	if f != nil {
		ac.SetTemp(*f)
	}
	return ac
}

// SetArpress sets the "arpress" field.
func (ac *AlertCreate) SetArpress(i int) *AlertCreate {
	ac.mutation.SetArpress(i)
	return ac
}

// SetNillableArpress sets the "arpress" field if the given value is not nil.
func (ac *AlertCreate) SetNillableArpress(i *int) *AlertCreate {
	if i != nil {
		ac.SetArpress(*i)
	}
	return ac
}

// SetWndspd sets the "wndspd" field.
func (ac *AlertCreate) SetWndspd(i int) *AlertCreate {
	ac.mutation.SetWndspd(i)
	return ac
}

// SetNillableWndspd sets the "wndspd" field if the given value is not nil.
func (ac *AlertCreate) SetNillableWndspd(i *int) *AlertCreate {
	if i != nil {
		ac.SetWndspd(*i)
	}
	return ac
}

// SetRhum sets the "rhum" field.
func (ac *AlertCreate) SetRhum(i int) *AlertCreate {
	ac.mutation.SetRhum(i)
	return ac
}

// SetNillableRhum sets the "rhum" field if the given value is not nil.
func (ac *AlertCreate) SetNillableRhum(i *int) *AlertCreate {
	if i != nil {
		ac.SetRhum(*i)
	}
	return ac
}

// SetFeeltmp sets the "feeltmp" field.
func (ac *AlertCreate) SetFeeltmp(i int) *AlertCreate {
	ac.mutation.SetFeeltmp(i)
	return ac
}

// SetNillableFeeltmp sets the "feeltmp" field if the given value is not nil.
func (ac *AlertCreate) SetNillableFeeltmp(i *int) *AlertCreate {
	if i != nil {
		ac.SetFeeltmp(*i)
	}
	return ac
}

// SetText sets the "text" field.
func (ac *AlertCreate) SetText(s string) *AlertCreate {
	ac.mutation.SetText(s)
	return ac
}

// Mutation returns the AlertMutation object of the builder.
func (ac *AlertCreate) Mutation() *AlertMutation {
	return ac.mutation
}

// Save creates the Alert in the database.
func (ac *AlertCreate) Save(ctx context.Context) (*Alert, error) {
	var (
		err  error
		node *Alert
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlertMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AlertCreate) SaveX(ctx context.Context) *Alert {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AlertCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AlertCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AlertCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := alert.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := alert.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AlertCreate) check() error {
	if _, ok := ac.mutation.Ulid(); !ok {
		return &ValidationError{Name: "ulid", err: errors.New(`ent: missing required field "ulid"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := ac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "title"`)}
	}
	if _, ok := ac.mutation.Lat(); !ok {
		return &ValidationError{Name: "lat", err: errors.New(`ent: missing required field "lat"`)}
	}
	if _, ok := ac.mutation.Lon(); !ok {
		return &ValidationError{Name: "lon", err: errors.New(`ent: missing required field "lon"`)}
	}
	if _, ok := ac.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "text"`)}
	}
	return nil
}

func (ac *AlertCreate) sqlSave(ctx context.Context) (*Alert, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AlertCreate) createSpec() (*Alert, *sqlgraph.CreateSpec) {
	var (
		_node = &Alert{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: alert.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: alert.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Ulid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldUlid,
		})
		_node.Ulid = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alert.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alert.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alert.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ac.mutation.Lat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: alert.FieldLat,
		})
		_node.Lat = value
	}
	if value, ok := ac.mutation.Lon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: alert.FieldLon,
		})
		_node.Lon = value
	}
	if value, ok := ac.mutation.Wx(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldWx,
		})
		_node.Wx = &value
	}
	if value, ok := ac.mutation.Temp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: alert.FieldTemp,
		})
		_node.Temp = &value
	}
	if value, ok := ac.mutation.Arpress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldArpress,
		})
		_node.Arpress = &value
	}
	if value, ok := ac.mutation.Wndspd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldWndspd,
		})
		_node.Wndspd = &value
	}
	if value, ok := ac.mutation.Rhum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldRhum,
		})
		_node.Rhum = &value
	}
	if value, ok := ac.mutation.Feeltmp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldFeeltmp,
		})
		_node.Feeltmp = &value
	}
	if value, ok := ac.mutation.Text(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldText,
		})
		_node.Text = value
	}
	return _node, _spec
}

// AlertCreateBulk is the builder for creating many Alert entities in bulk.
type AlertCreateBulk struct {
	config
	builders []*AlertCreate
}

// Save creates the Alert entities in the database.
func (acb *AlertCreateBulk) Save(ctx context.Context) ([]*Alert, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Alert, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlertMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AlertCreateBulk) SaveX(ctx context.Context) []*Alert {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AlertCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AlertCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
