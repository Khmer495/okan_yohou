// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/Khmer495/okan_yohou/internal/pkg/ent/alert"
	"github.com/Khmer495/okan_yohou/internal/pkg/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAlert = "Alert"
)

// AlertMutation represents an operation that mutates the Alert nodes in the graph.
type AlertMutation struct {
	config
	op            Op
	typ           string
	id            *int
	ulid          *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	title         *string
	lat           *float32
	addlat        *float32
	lon           *float32
	addlon        *float32
	wx            *int
	addwx         *int
	temp          *float32
	addtemp       *float32
	arpress       *int
	addarpress    *int
	wndspd        *int
	addwndspd     *int
	rhum          *int
	addrhum       *int
	feeltmp       *int
	addfeeltmp    *int
	text          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Alert, error)
	predicates    []predicate.Alert
}

var _ ent.Mutation = (*AlertMutation)(nil)

// alertOption allows management of the mutation configuration using functional options.
type alertOption func(*AlertMutation)

// newAlertMutation creates new mutation for the Alert entity.
func newAlertMutation(c config, op Op, opts ...alertOption) *AlertMutation {
	m := &AlertMutation{
		config:        c,
		op:            op,
		typ:           TypeAlert,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAlertID sets the ID field of the mutation.
func withAlertID(id int) alertOption {
	return func(m *AlertMutation) {
		var (
			err   error
			once  sync.Once
			value *Alert
		)
		m.oldValue = func(ctx context.Context) (*Alert, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Alert.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAlert sets the old Alert of the mutation.
func withAlert(node *Alert) alertOption {
	return func(m *AlertMutation) {
		m.oldValue = func(context.Context) (*Alert, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AlertMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AlertMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AlertMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUlid sets the "ulid" field.
func (m *AlertMutation) SetUlid(s string) {
	m.ulid = &s
}

// Ulid returns the value of the "ulid" field in the mutation.
func (m *AlertMutation) Ulid() (r string, exists bool) {
	v := m.ulid
	if v == nil {
		return
	}
	return *v, true
}

// OldUlid returns the old "ulid" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldUlid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUlid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUlid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUlid: %w", err)
	}
	return oldValue.Ulid, nil
}

// ResetUlid resets all changes to the "ulid" field.
func (m *AlertMutation) ResetUlid() {
	m.ulid = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AlertMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AlertMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AlertMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AlertMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AlertMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AlertMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AlertMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AlertMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AlertMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[alert.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AlertMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[alert.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AlertMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, alert.FieldDeletedAt)
}

// SetTitle sets the "title" field.
func (m *AlertMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AlertMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *AlertMutation) ResetTitle() {
	m.title = nil
}

// SetLat sets the "lat" field.
func (m *AlertMutation) SetLat(f float32) {
	m.lat = &f
	m.addlat = nil
}

// Lat returns the value of the "lat" field in the mutation.
func (m *AlertMutation) Lat() (r float32, exists bool) {
	v := m.lat
	if v == nil {
		return
	}
	return *v, true
}

// OldLat returns the old "lat" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldLat(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLat: %w", err)
	}
	return oldValue.Lat, nil
}

// AddLat adds f to the "lat" field.
func (m *AlertMutation) AddLat(f float32) {
	if m.addlat != nil {
		*m.addlat += f
	} else {
		m.addlat = &f
	}
}

// AddedLat returns the value that was added to the "lat" field in this mutation.
func (m *AlertMutation) AddedLat() (r float32, exists bool) {
	v := m.addlat
	if v == nil {
		return
	}
	return *v, true
}

// ResetLat resets all changes to the "lat" field.
func (m *AlertMutation) ResetLat() {
	m.lat = nil
	m.addlat = nil
}

// SetLon sets the "lon" field.
func (m *AlertMutation) SetLon(f float32) {
	m.lon = &f
	m.addlon = nil
}

// Lon returns the value of the "lon" field in the mutation.
func (m *AlertMutation) Lon() (r float32, exists bool) {
	v := m.lon
	if v == nil {
		return
	}
	return *v, true
}

// OldLon returns the old "lon" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldLon(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLon: %w", err)
	}
	return oldValue.Lon, nil
}

// AddLon adds f to the "lon" field.
func (m *AlertMutation) AddLon(f float32) {
	if m.addlon != nil {
		*m.addlon += f
	} else {
		m.addlon = &f
	}
}

// AddedLon returns the value that was added to the "lon" field in this mutation.
func (m *AlertMutation) AddedLon() (r float32, exists bool) {
	v := m.addlon
	if v == nil {
		return
	}
	return *v, true
}

// ResetLon resets all changes to the "lon" field.
func (m *AlertMutation) ResetLon() {
	m.lon = nil
	m.addlon = nil
}

// SetWx sets the "wx" field.
func (m *AlertMutation) SetWx(i int) {
	m.wx = &i
	m.addwx = nil
}

// Wx returns the value of the "wx" field in the mutation.
func (m *AlertMutation) Wx() (r int, exists bool) {
	v := m.wx
	if v == nil {
		return
	}
	return *v, true
}

// OldWx returns the old "wx" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldWx(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWx: %w", err)
	}
	return oldValue.Wx, nil
}

// AddWx adds i to the "wx" field.
func (m *AlertMutation) AddWx(i int) {
	if m.addwx != nil {
		*m.addwx += i
	} else {
		m.addwx = &i
	}
}

// AddedWx returns the value that was added to the "wx" field in this mutation.
func (m *AlertMutation) AddedWx() (r int, exists bool) {
	v := m.addwx
	if v == nil {
		return
	}
	return *v, true
}

// ClearWx clears the value of the "wx" field.
func (m *AlertMutation) ClearWx() {
	m.wx = nil
	m.addwx = nil
	m.clearedFields[alert.FieldWx] = struct{}{}
}

// WxCleared returns if the "wx" field was cleared in this mutation.
func (m *AlertMutation) WxCleared() bool {
	_, ok := m.clearedFields[alert.FieldWx]
	return ok
}

// ResetWx resets all changes to the "wx" field.
func (m *AlertMutation) ResetWx() {
	m.wx = nil
	m.addwx = nil
	delete(m.clearedFields, alert.FieldWx)
}

// SetTemp sets the "temp" field.
func (m *AlertMutation) SetTemp(f float32) {
	m.temp = &f
	m.addtemp = nil
}

// Temp returns the value of the "temp" field in the mutation.
func (m *AlertMutation) Temp() (r float32, exists bool) {
	v := m.temp
	if v == nil {
		return
	}
	return *v, true
}

// OldTemp returns the old "temp" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldTemp(ctx context.Context) (v *float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTemp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTemp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemp: %w", err)
	}
	return oldValue.Temp, nil
}

// AddTemp adds f to the "temp" field.
func (m *AlertMutation) AddTemp(f float32) {
	if m.addtemp != nil {
		*m.addtemp += f
	} else {
		m.addtemp = &f
	}
}

// AddedTemp returns the value that was added to the "temp" field in this mutation.
func (m *AlertMutation) AddedTemp() (r float32, exists bool) {
	v := m.addtemp
	if v == nil {
		return
	}
	return *v, true
}

// ClearTemp clears the value of the "temp" field.
func (m *AlertMutation) ClearTemp() {
	m.temp = nil
	m.addtemp = nil
	m.clearedFields[alert.FieldTemp] = struct{}{}
}

// TempCleared returns if the "temp" field was cleared in this mutation.
func (m *AlertMutation) TempCleared() bool {
	_, ok := m.clearedFields[alert.FieldTemp]
	return ok
}

// ResetTemp resets all changes to the "temp" field.
func (m *AlertMutation) ResetTemp() {
	m.temp = nil
	m.addtemp = nil
	delete(m.clearedFields, alert.FieldTemp)
}

// SetArpress sets the "arpress" field.
func (m *AlertMutation) SetArpress(i int) {
	m.arpress = &i
	m.addarpress = nil
}

// Arpress returns the value of the "arpress" field in the mutation.
func (m *AlertMutation) Arpress() (r int, exists bool) {
	v := m.arpress
	if v == nil {
		return
	}
	return *v, true
}

// OldArpress returns the old "arpress" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldArpress(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldArpress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldArpress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArpress: %w", err)
	}
	return oldValue.Arpress, nil
}

// AddArpress adds i to the "arpress" field.
func (m *AlertMutation) AddArpress(i int) {
	if m.addarpress != nil {
		*m.addarpress += i
	} else {
		m.addarpress = &i
	}
}

// AddedArpress returns the value that was added to the "arpress" field in this mutation.
func (m *AlertMutation) AddedArpress() (r int, exists bool) {
	v := m.addarpress
	if v == nil {
		return
	}
	return *v, true
}

// ClearArpress clears the value of the "arpress" field.
func (m *AlertMutation) ClearArpress() {
	m.arpress = nil
	m.addarpress = nil
	m.clearedFields[alert.FieldArpress] = struct{}{}
}

// ArpressCleared returns if the "arpress" field was cleared in this mutation.
func (m *AlertMutation) ArpressCleared() bool {
	_, ok := m.clearedFields[alert.FieldArpress]
	return ok
}

// ResetArpress resets all changes to the "arpress" field.
func (m *AlertMutation) ResetArpress() {
	m.arpress = nil
	m.addarpress = nil
	delete(m.clearedFields, alert.FieldArpress)
}

// SetWndspd sets the "wndspd" field.
func (m *AlertMutation) SetWndspd(i int) {
	m.wndspd = &i
	m.addwndspd = nil
}

// Wndspd returns the value of the "wndspd" field in the mutation.
func (m *AlertMutation) Wndspd() (r int, exists bool) {
	v := m.wndspd
	if v == nil {
		return
	}
	return *v, true
}

// OldWndspd returns the old "wndspd" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldWndspd(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWndspd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWndspd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWndspd: %w", err)
	}
	return oldValue.Wndspd, nil
}

// AddWndspd adds i to the "wndspd" field.
func (m *AlertMutation) AddWndspd(i int) {
	if m.addwndspd != nil {
		*m.addwndspd += i
	} else {
		m.addwndspd = &i
	}
}

// AddedWndspd returns the value that was added to the "wndspd" field in this mutation.
func (m *AlertMutation) AddedWndspd() (r int, exists bool) {
	v := m.addwndspd
	if v == nil {
		return
	}
	return *v, true
}

// ClearWndspd clears the value of the "wndspd" field.
func (m *AlertMutation) ClearWndspd() {
	m.wndspd = nil
	m.addwndspd = nil
	m.clearedFields[alert.FieldWndspd] = struct{}{}
}

// WndspdCleared returns if the "wndspd" field was cleared in this mutation.
func (m *AlertMutation) WndspdCleared() bool {
	_, ok := m.clearedFields[alert.FieldWndspd]
	return ok
}

// ResetWndspd resets all changes to the "wndspd" field.
func (m *AlertMutation) ResetWndspd() {
	m.wndspd = nil
	m.addwndspd = nil
	delete(m.clearedFields, alert.FieldWndspd)
}

// SetRhum sets the "rhum" field.
func (m *AlertMutation) SetRhum(i int) {
	m.rhum = &i
	m.addrhum = nil
}

// Rhum returns the value of the "rhum" field in the mutation.
func (m *AlertMutation) Rhum() (r int, exists bool) {
	v := m.rhum
	if v == nil {
		return
	}
	return *v, true
}

// OldRhum returns the old "rhum" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldRhum(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRhum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRhum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRhum: %w", err)
	}
	return oldValue.Rhum, nil
}

// AddRhum adds i to the "rhum" field.
func (m *AlertMutation) AddRhum(i int) {
	if m.addrhum != nil {
		*m.addrhum += i
	} else {
		m.addrhum = &i
	}
}

// AddedRhum returns the value that was added to the "rhum" field in this mutation.
func (m *AlertMutation) AddedRhum() (r int, exists bool) {
	v := m.addrhum
	if v == nil {
		return
	}
	return *v, true
}

// ClearRhum clears the value of the "rhum" field.
func (m *AlertMutation) ClearRhum() {
	m.rhum = nil
	m.addrhum = nil
	m.clearedFields[alert.FieldRhum] = struct{}{}
}

// RhumCleared returns if the "rhum" field was cleared in this mutation.
func (m *AlertMutation) RhumCleared() bool {
	_, ok := m.clearedFields[alert.FieldRhum]
	return ok
}

// ResetRhum resets all changes to the "rhum" field.
func (m *AlertMutation) ResetRhum() {
	m.rhum = nil
	m.addrhum = nil
	delete(m.clearedFields, alert.FieldRhum)
}

// SetFeeltmp sets the "feeltmp" field.
func (m *AlertMutation) SetFeeltmp(i int) {
	m.feeltmp = &i
	m.addfeeltmp = nil
}

// Feeltmp returns the value of the "feeltmp" field in the mutation.
func (m *AlertMutation) Feeltmp() (r int, exists bool) {
	v := m.feeltmp
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeltmp returns the old "feeltmp" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldFeeltmp(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFeeltmp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFeeltmp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeltmp: %w", err)
	}
	return oldValue.Feeltmp, nil
}

// AddFeeltmp adds i to the "feeltmp" field.
func (m *AlertMutation) AddFeeltmp(i int) {
	if m.addfeeltmp != nil {
		*m.addfeeltmp += i
	} else {
		m.addfeeltmp = &i
	}
}

// AddedFeeltmp returns the value that was added to the "feeltmp" field in this mutation.
func (m *AlertMutation) AddedFeeltmp() (r int, exists bool) {
	v := m.addfeeltmp
	if v == nil {
		return
	}
	return *v, true
}

// ClearFeeltmp clears the value of the "feeltmp" field.
func (m *AlertMutation) ClearFeeltmp() {
	m.feeltmp = nil
	m.addfeeltmp = nil
	m.clearedFields[alert.FieldFeeltmp] = struct{}{}
}

// FeeltmpCleared returns if the "feeltmp" field was cleared in this mutation.
func (m *AlertMutation) FeeltmpCleared() bool {
	_, ok := m.clearedFields[alert.FieldFeeltmp]
	return ok
}

// ResetFeeltmp resets all changes to the "feeltmp" field.
func (m *AlertMutation) ResetFeeltmp() {
	m.feeltmp = nil
	m.addfeeltmp = nil
	delete(m.clearedFields, alert.FieldFeeltmp)
}

// SetText sets the "text" field.
func (m *AlertMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *AlertMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *AlertMutation) ResetText() {
	m.text = nil
}

// Where appends a list predicates to the AlertMutation builder.
func (m *AlertMutation) Where(ps ...predicate.Alert) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AlertMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Alert).
func (m *AlertMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AlertMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.ulid != nil {
		fields = append(fields, alert.FieldUlid)
	}
	if m.created_at != nil {
		fields = append(fields, alert.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, alert.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, alert.FieldDeletedAt)
	}
	if m.title != nil {
		fields = append(fields, alert.FieldTitle)
	}
	if m.lat != nil {
		fields = append(fields, alert.FieldLat)
	}
	if m.lon != nil {
		fields = append(fields, alert.FieldLon)
	}
	if m.wx != nil {
		fields = append(fields, alert.FieldWx)
	}
	if m.temp != nil {
		fields = append(fields, alert.FieldTemp)
	}
	if m.arpress != nil {
		fields = append(fields, alert.FieldArpress)
	}
	if m.wndspd != nil {
		fields = append(fields, alert.FieldWndspd)
	}
	if m.rhum != nil {
		fields = append(fields, alert.FieldRhum)
	}
	if m.feeltmp != nil {
		fields = append(fields, alert.FieldFeeltmp)
	}
	if m.text != nil {
		fields = append(fields, alert.FieldText)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AlertMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case alert.FieldUlid:
		return m.Ulid()
	case alert.FieldCreatedAt:
		return m.CreatedAt()
	case alert.FieldUpdatedAt:
		return m.UpdatedAt()
	case alert.FieldDeletedAt:
		return m.DeletedAt()
	case alert.FieldTitle:
		return m.Title()
	case alert.FieldLat:
		return m.Lat()
	case alert.FieldLon:
		return m.Lon()
	case alert.FieldWx:
		return m.Wx()
	case alert.FieldTemp:
		return m.Temp()
	case alert.FieldArpress:
		return m.Arpress()
	case alert.FieldWndspd:
		return m.Wndspd()
	case alert.FieldRhum:
		return m.Rhum()
	case alert.FieldFeeltmp:
		return m.Feeltmp()
	case alert.FieldText:
		return m.Text()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AlertMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case alert.FieldUlid:
		return m.OldUlid(ctx)
	case alert.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case alert.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case alert.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case alert.FieldTitle:
		return m.OldTitle(ctx)
	case alert.FieldLat:
		return m.OldLat(ctx)
	case alert.FieldLon:
		return m.OldLon(ctx)
	case alert.FieldWx:
		return m.OldWx(ctx)
	case alert.FieldTemp:
		return m.OldTemp(ctx)
	case alert.FieldArpress:
		return m.OldArpress(ctx)
	case alert.FieldWndspd:
		return m.OldWndspd(ctx)
	case alert.FieldRhum:
		return m.OldRhum(ctx)
	case alert.FieldFeeltmp:
		return m.OldFeeltmp(ctx)
	case alert.FieldText:
		return m.OldText(ctx)
	}
	return nil, fmt.Errorf("unknown Alert field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlertMutation) SetField(name string, value ent.Value) error {
	switch name {
	case alert.FieldUlid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUlid(v)
		return nil
	case alert.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case alert.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case alert.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case alert.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case alert.FieldLat:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLat(v)
		return nil
	case alert.FieldLon:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLon(v)
		return nil
	case alert.FieldWx:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWx(v)
		return nil
	case alert.FieldTemp:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemp(v)
		return nil
	case alert.FieldArpress:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArpress(v)
		return nil
	case alert.FieldWndspd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWndspd(v)
		return nil
	case alert.FieldRhum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRhum(v)
		return nil
	case alert.FieldFeeltmp:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeltmp(v)
		return nil
	case alert.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	}
	return fmt.Errorf("unknown Alert field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AlertMutation) AddedFields() []string {
	var fields []string
	if m.addlat != nil {
		fields = append(fields, alert.FieldLat)
	}
	if m.addlon != nil {
		fields = append(fields, alert.FieldLon)
	}
	if m.addwx != nil {
		fields = append(fields, alert.FieldWx)
	}
	if m.addtemp != nil {
		fields = append(fields, alert.FieldTemp)
	}
	if m.addarpress != nil {
		fields = append(fields, alert.FieldArpress)
	}
	if m.addwndspd != nil {
		fields = append(fields, alert.FieldWndspd)
	}
	if m.addrhum != nil {
		fields = append(fields, alert.FieldRhum)
	}
	if m.addfeeltmp != nil {
		fields = append(fields, alert.FieldFeeltmp)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AlertMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case alert.FieldLat:
		return m.AddedLat()
	case alert.FieldLon:
		return m.AddedLon()
	case alert.FieldWx:
		return m.AddedWx()
	case alert.FieldTemp:
		return m.AddedTemp()
	case alert.FieldArpress:
		return m.AddedArpress()
	case alert.FieldWndspd:
		return m.AddedWndspd()
	case alert.FieldRhum:
		return m.AddedRhum()
	case alert.FieldFeeltmp:
		return m.AddedFeeltmp()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlertMutation) AddField(name string, value ent.Value) error {
	switch name {
	case alert.FieldLat:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLat(v)
		return nil
	case alert.FieldLon:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLon(v)
		return nil
	case alert.FieldWx:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWx(v)
		return nil
	case alert.FieldTemp:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTemp(v)
		return nil
	case alert.FieldArpress:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddArpress(v)
		return nil
	case alert.FieldWndspd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWndspd(v)
		return nil
	case alert.FieldRhum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRhum(v)
		return nil
	case alert.FieldFeeltmp:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFeeltmp(v)
		return nil
	}
	return fmt.Errorf("unknown Alert numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AlertMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(alert.FieldDeletedAt) {
		fields = append(fields, alert.FieldDeletedAt)
	}
	if m.FieldCleared(alert.FieldWx) {
		fields = append(fields, alert.FieldWx)
	}
	if m.FieldCleared(alert.FieldTemp) {
		fields = append(fields, alert.FieldTemp)
	}
	if m.FieldCleared(alert.FieldArpress) {
		fields = append(fields, alert.FieldArpress)
	}
	if m.FieldCleared(alert.FieldWndspd) {
		fields = append(fields, alert.FieldWndspd)
	}
	if m.FieldCleared(alert.FieldRhum) {
		fields = append(fields, alert.FieldRhum)
	}
	if m.FieldCleared(alert.FieldFeeltmp) {
		fields = append(fields, alert.FieldFeeltmp)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AlertMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AlertMutation) ClearField(name string) error {
	switch name {
	case alert.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case alert.FieldWx:
		m.ClearWx()
		return nil
	case alert.FieldTemp:
		m.ClearTemp()
		return nil
	case alert.FieldArpress:
		m.ClearArpress()
		return nil
	case alert.FieldWndspd:
		m.ClearWndspd()
		return nil
	case alert.FieldRhum:
		m.ClearRhum()
		return nil
	case alert.FieldFeeltmp:
		m.ClearFeeltmp()
		return nil
	}
	return fmt.Errorf("unknown Alert nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AlertMutation) ResetField(name string) error {
	switch name {
	case alert.FieldUlid:
		m.ResetUlid()
		return nil
	case alert.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case alert.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case alert.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case alert.FieldTitle:
		m.ResetTitle()
		return nil
	case alert.FieldLat:
		m.ResetLat()
		return nil
	case alert.FieldLon:
		m.ResetLon()
		return nil
	case alert.FieldWx:
		m.ResetWx()
		return nil
	case alert.FieldTemp:
		m.ResetTemp()
		return nil
	case alert.FieldArpress:
		m.ResetArpress()
		return nil
	case alert.FieldWndspd:
		m.ResetWndspd()
		return nil
	case alert.FieldRhum:
		m.ResetRhum()
		return nil
	case alert.FieldFeeltmp:
		m.ResetFeeltmp()
		return nil
	case alert.FieldText:
		m.ResetText()
		return nil
	}
	return fmt.Errorf("unknown Alert field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AlertMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AlertMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AlertMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AlertMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AlertMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AlertMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AlertMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Alert unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AlertMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Alert edge %s", name)
}
