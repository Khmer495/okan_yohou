// Code generated by entc, DO NOT EDIT.

package alert

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Khmer495/okan_yohou/internal/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Ulid applies equality check predicate on the "ulid" field. It's identical to UlidEQ.
func Ulid(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUlid), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Lat applies equality check predicate on the "lat" field. It's identical to LatEQ.
func Lat(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLat), v))
	})
}

// Lon applies equality check predicate on the "lon" field. It's identical to LonEQ.
func Lon(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLon), v))
	})
}

// Wx applies equality check predicate on the "wx" field. It's identical to WxEQ.
func Wx(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWx), v))
	})
}

// Temp applies equality check predicate on the "temp" field. It's identical to TempEQ.
func Temp(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemp), v))
	})
}

// Arpress applies equality check predicate on the "arpress" field. It's identical to ArpressEQ.
func Arpress(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArpress), v))
	})
}

// Wndspd applies equality check predicate on the "wndspd" field. It's identical to WndspdEQ.
func Wndspd(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWndspd), v))
	})
}

// Rhum applies equality check predicate on the "rhum" field. It's identical to RhumEQ.
func Rhum(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRhum), v))
	})
}

// Feeltmp applies equality check predicate on the "feeltmp" field. It's identical to FeeltmpEQ.
func Feeltmp(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeeltmp), v))
	})
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldText), v))
	})
}

// UlidEQ applies the EQ predicate on the "ulid" field.
func UlidEQ(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUlid), v))
	})
}

// UlidNEQ applies the NEQ predicate on the "ulid" field.
func UlidNEQ(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUlid), v))
	})
}

// UlidIn applies the In predicate on the "ulid" field.
func UlidIn(vs ...string) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUlid), v...))
	})
}

// UlidNotIn applies the NotIn predicate on the "ulid" field.
func UlidNotIn(vs ...string) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUlid), v...))
	})
}

// UlidGT applies the GT predicate on the "ulid" field.
func UlidGT(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUlid), v))
	})
}

// UlidGTE applies the GTE predicate on the "ulid" field.
func UlidGTE(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUlid), v))
	})
}

// UlidLT applies the LT predicate on the "ulid" field.
func UlidLT(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUlid), v))
	})
}

// UlidLTE applies the LTE predicate on the "ulid" field.
func UlidLTE(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUlid), v))
	})
}

// UlidContains applies the Contains predicate on the "ulid" field.
func UlidContains(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUlid), v))
	})
}

// UlidHasPrefix applies the HasPrefix predicate on the "ulid" field.
func UlidHasPrefix(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUlid), v))
	})
}

// UlidHasSuffix applies the HasSuffix predicate on the "ulid" field.
func UlidHasSuffix(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUlid), v))
	})
}

// UlidEqualFold applies the EqualFold predicate on the "ulid" field.
func UlidEqualFold(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUlid), v))
	})
}

// UlidContainsFold applies the ContainsFold predicate on the "ulid" field.
func UlidContainsFold(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUlid), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// LatEQ applies the EQ predicate on the "lat" field.
func LatEQ(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLat), v))
	})
}

// LatNEQ applies the NEQ predicate on the "lat" field.
func LatNEQ(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLat), v))
	})
}

// LatIn applies the In predicate on the "lat" field.
func LatIn(vs ...float64) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLat), v...))
	})
}

// LatNotIn applies the NotIn predicate on the "lat" field.
func LatNotIn(vs ...float64) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLat), v...))
	})
}

// LatGT applies the GT predicate on the "lat" field.
func LatGT(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLat), v))
	})
}

// LatGTE applies the GTE predicate on the "lat" field.
func LatGTE(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLat), v))
	})
}

// LatLT applies the LT predicate on the "lat" field.
func LatLT(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLat), v))
	})
}

// LatLTE applies the LTE predicate on the "lat" field.
func LatLTE(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLat), v))
	})
}

// LonEQ applies the EQ predicate on the "lon" field.
func LonEQ(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLon), v))
	})
}

// LonNEQ applies the NEQ predicate on the "lon" field.
func LonNEQ(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLon), v))
	})
}

// LonIn applies the In predicate on the "lon" field.
func LonIn(vs ...float64) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLon), v...))
	})
}

// LonNotIn applies the NotIn predicate on the "lon" field.
func LonNotIn(vs ...float64) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLon), v...))
	})
}

// LonGT applies the GT predicate on the "lon" field.
func LonGT(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLon), v))
	})
}

// LonGTE applies the GTE predicate on the "lon" field.
func LonGTE(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLon), v))
	})
}

// LonLT applies the LT predicate on the "lon" field.
func LonLT(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLon), v))
	})
}

// LonLTE applies the LTE predicate on the "lon" field.
func LonLTE(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLon), v))
	})
}

// WxEQ applies the EQ predicate on the "wx" field.
func WxEQ(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWx), v))
	})
}

// WxNEQ applies the NEQ predicate on the "wx" field.
func WxNEQ(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWx), v))
	})
}

// WxIn applies the In predicate on the "wx" field.
func WxIn(vs ...int) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWx), v...))
	})
}

// WxNotIn applies the NotIn predicate on the "wx" field.
func WxNotIn(vs ...int) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWx), v...))
	})
}

// WxGT applies the GT predicate on the "wx" field.
func WxGT(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWx), v))
	})
}

// WxGTE applies the GTE predicate on the "wx" field.
func WxGTE(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWx), v))
	})
}

// WxLT applies the LT predicate on the "wx" field.
func WxLT(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWx), v))
	})
}

// WxLTE applies the LTE predicate on the "wx" field.
func WxLTE(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWx), v))
	})
}

// WxIsNil applies the IsNil predicate on the "wx" field.
func WxIsNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWx)))
	})
}

// WxNotNil applies the NotNil predicate on the "wx" field.
func WxNotNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWx)))
	})
}

// TempEQ applies the EQ predicate on the "temp" field.
func TempEQ(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemp), v))
	})
}

// TempNEQ applies the NEQ predicate on the "temp" field.
func TempNEQ(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemp), v))
	})
}

// TempIn applies the In predicate on the "temp" field.
func TempIn(vs ...float64) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTemp), v...))
	})
}

// TempNotIn applies the NotIn predicate on the "temp" field.
func TempNotIn(vs ...float64) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTemp), v...))
	})
}

// TempGT applies the GT predicate on the "temp" field.
func TempGT(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTemp), v))
	})
}

// TempGTE applies the GTE predicate on the "temp" field.
func TempGTE(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTemp), v))
	})
}

// TempLT applies the LT predicate on the "temp" field.
func TempLT(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTemp), v))
	})
}

// TempLTE applies the LTE predicate on the "temp" field.
func TempLTE(v float64) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTemp), v))
	})
}

// TempIsNil applies the IsNil predicate on the "temp" field.
func TempIsNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTemp)))
	})
}

// TempNotNil applies the NotNil predicate on the "temp" field.
func TempNotNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTemp)))
	})
}

// ArpressEQ applies the EQ predicate on the "arpress" field.
func ArpressEQ(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArpress), v))
	})
}

// ArpressNEQ applies the NEQ predicate on the "arpress" field.
func ArpressNEQ(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArpress), v))
	})
}

// ArpressIn applies the In predicate on the "arpress" field.
func ArpressIn(vs ...int) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArpress), v...))
	})
}

// ArpressNotIn applies the NotIn predicate on the "arpress" field.
func ArpressNotIn(vs ...int) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArpress), v...))
	})
}

// ArpressGT applies the GT predicate on the "arpress" field.
func ArpressGT(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArpress), v))
	})
}

// ArpressGTE applies the GTE predicate on the "arpress" field.
func ArpressGTE(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArpress), v))
	})
}

// ArpressLT applies the LT predicate on the "arpress" field.
func ArpressLT(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArpress), v))
	})
}

// ArpressLTE applies the LTE predicate on the "arpress" field.
func ArpressLTE(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArpress), v))
	})
}

// ArpressIsNil applies the IsNil predicate on the "arpress" field.
func ArpressIsNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArpress)))
	})
}

// ArpressNotNil applies the NotNil predicate on the "arpress" field.
func ArpressNotNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArpress)))
	})
}

// WndspdEQ applies the EQ predicate on the "wndspd" field.
func WndspdEQ(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWndspd), v))
	})
}

// WndspdNEQ applies the NEQ predicate on the "wndspd" field.
func WndspdNEQ(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWndspd), v))
	})
}

// WndspdIn applies the In predicate on the "wndspd" field.
func WndspdIn(vs ...int) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWndspd), v...))
	})
}

// WndspdNotIn applies the NotIn predicate on the "wndspd" field.
func WndspdNotIn(vs ...int) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWndspd), v...))
	})
}

// WndspdGT applies the GT predicate on the "wndspd" field.
func WndspdGT(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWndspd), v))
	})
}

// WndspdGTE applies the GTE predicate on the "wndspd" field.
func WndspdGTE(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWndspd), v))
	})
}

// WndspdLT applies the LT predicate on the "wndspd" field.
func WndspdLT(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWndspd), v))
	})
}

// WndspdLTE applies the LTE predicate on the "wndspd" field.
func WndspdLTE(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWndspd), v))
	})
}

// WndspdIsNil applies the IsNil predicate on the "wndspd" field.
func WndspdIsNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWndspd)))
	})
}

// WndspdNotNil applies the NotNil predicate on the "wndspd" field.
func WndspdNotNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWndspd)))
	})
}

// RhumEQ applies the EQ predicate on the "rhum" field.
func RhumEQ(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRhum), v))
	})
}

// RhumNEQ applies the NEQ predicate on the "rhum" field.
func RhumNEQ(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRhum), v))
	})
}

// RhumIn applies the In predicate on the "rhum" field.
func RhumIn(vs ...int) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRhum), v...))
	})
}

// RhumNotIn applies the NotIn predicate on the "rhum" field.
func RhumNotIn(vs ...int) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRhum), v...))
	})
}

// RhumGT applies the GT predicate on the "rhum" field.
func RhumGT(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRhum), v))
	})
}

// RhumGTE applies the GTE predicate on the "rhum" field.
func RhumGTE(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRhum), v))
	})
}

// RhumLT applies the LT predicate on the "rhum" field.
func RhumLT(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRhum), v))
	})
}

// RhumLTE applies the LTE predicate on the "rhum" field.
func RhumLTE(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRhum), v))
	})
}

// RhumIsNil applies the IsNil predicate on the "rhum" field.
func RhumIsNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRhum)))
	})
}

// RhumNotNil applies the NotNil predicate on the "rhum" field.
func RhumNotNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRhum)))
	})
}

// FeeltmpEQ applies the EQ predicate on the "feeltmp" field.
func FeeltmpEQ(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeeltmp), v))
	})
}

// FeeltmpNEQ applies the NEQ predicate on the "feeltmp" field.
func FeeltmpNEQ(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeeltmp), v))
	})
}

// FeeltmpIn applies the In predicate on the "feeltmp" field.
func FeeltmpIn(vs ...int) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFeeltmp), v...))
	})
}

// FeeltmpNotIn applies the NotIn predicate on the "feeltmp" field.
func FeeltmpNotIn(vs ...int) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFeeltmp), v...))
	})
}

// FeeltmpGT applies the GT predicate on the "feeltmp" field.
func FeeltmpGT(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeeltmp), v))
	})
}

// FeeltmpGTE applies the GTE predicate on the "feeltmp" field.
func FeeltmpGTE(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeeltmp), v))
	})
}

// FeeltmpLT applies the LT predicate on the "feeltmp" field.
func FeeltmpLT(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeeltmp), v))
	})
}

// FeeltmpLTE applies the LTE predicate on the "feeltmp" field.
func FeeltmpLTE(v int) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeeltmp), v))
	})
}

// FeeltmpIsNil applies the IsNil predicate on the "feeltmp" field.
func FeeltmpIsNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFeeltmp)))
	})
}

// FeeltmpNotNil applies the NotNil predicate on the "feeltmp" field.
func FeeltmpNotNil() predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFeeltmp)))
	})
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldText), v))
	})
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldText), v))
	})
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldText), v...))
	})
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Alert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldText), v...))
	})
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldText), v))
	})
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldText), v))
	})
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldText), v))
	})
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldText), v))
	})
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldText), v))
	})
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldText), v))
	})
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldText), v))
	})
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldText), v))
	})
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldText), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Alert) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Alert) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Alert) predicate.Alert {
	return predicate.Alert(func(s *sql.Selector) {
		p(s.Not())
	})
}
