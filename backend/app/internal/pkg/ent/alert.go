// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Khmer495/okan_yohou/internal/pkg/ent/alert"
)

// Alert is the model entity for the Alert schema.
type Alert struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Ulid holds the value of the "ulid" field.
	Ulid string `json:"ulid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Lat holds the value of the "lat" field.
	Lat float32 `json:"lat,omitempty"`
	// Lon holds the value of the "lon" field.
	Lon float32 `json:"lon,omitempty"`
	// Wx holds the value of the "wx" field.
	Wx *int `json:"wx,omitempty"`
	// Temp holds the value of the "temp" field.
	Temp *float32 `json:"temp,omitempty"`
	// Arpress holds the value of the "arpress" field.
	Arpress *int `json:"arpress,omitempty"`
	// Wndspd holds the value of the "wndspd" field.
	Wndspd *int `json:"wndspd,omitempty"`
	// Rhum holds the value of the "rhum" field.
	Rhum *int `json:"rhum,omitempty"`
	// Feeltmp holds the value of the "feeltmp" field.
	Feeltmp *int `json:"feeltmp,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Alert) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case alert.FieldLat, alert.FieldLon, alert.FieldTemp:
			values[i] = new(sql.NullFloat64)
		case alert.FieldID, alert.FieldWx, alert.FieldArpress, alert.FieldWndspd, alert.FieldRhum, alert.FieldFeeltmp:
			values[i] = new(sql.NullInt64)
		case alert.FieldUlid, alert.FieldTitle, alert.FieldText:
			values[i] = new(sql.NullString)
		case alert.FieldCreatedAt, alert.FieldUpdatedAt, alert.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Alert", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Alert fields.
func (a *Alert) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alert.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case alert.FieldUlid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ulid", values[i])
			} else if value.Valid {
				a.Ulid = value.String
			}
		case alert.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case alert.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case alert.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = new(time.Time)
				*a.DeletedAt = value.Time
			}
		case alert.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case alert.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				a.Lat = float32(value.Float64)
			}
		case alert.FieldLon:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lon", values[i])
			} else if value.Valid {
				a.Lon = float32(value.Float64)
			}
		case alert.FieldWx:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wx", values[i])
			} else if value.Valid {
				a.Wx = new(int)
				*a.Wx = int(value.Int64)
			}
		case alert.FieldTemp:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field temp", values[i])
			} else if value.Valid {
				a.Temp = new(float32)
				*a.Temp = float32(value.Float64)
			}
		case alert.FieldArpress:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field arpress", values[i])
			} else if value.Valid {
				a.Arpress = new(int)
				*a.Arpress = int(value.Int64)
			}
		case alert.FieldWndspd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wndspd", values[i])
			} else if value.Valid {
				a.Wndspd = new(int)
				*a.Wndspd = int(value.Int64)
			}
		case alert.FieldRhum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rhum", values[i])
			} else if value.Valid {
				a.Rhum = new(int)
				*a.Rhum = int(value.Int64)
			}
		case alert.FieldFeeltmp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feeltmp", values[i])
			} else if value.Valid {
				a.Feeltmp = new(int)
				*a.Feeltmp = int(value.Int64)
			}
		case alert.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				a.Text = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Alert.
// Note that you need to call Alert.Unwrap() before calling this method if this Alert
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Alert) Update() *AlertUpdateOne {
	return (&AlertClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Alert entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Alert) Unwrap() *Alert {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Alert is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Alert) String() string {
	var builder strings.Builder
	builder.WriteString("Alert(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", ulid=")
	builder.WriteString(a.Ulid)
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	if v := a.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", title=")
	builder.WriteString(a.Title)
	builder.WriteString(", lat=")
	builder.WriteString(fmt.Sprintf("%v", a.Lat))
	builder.WriteString(", lon=")
	builder.WriteString(fmt.Sprintf("%v", a.Lon))
	if v := a.Wx; v != nil {
		builder.WriteString(", wx=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := a.Temp; v != nil {
		builder.WriteString(", temp=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := a.Arpress; v != nil {
		builder.WriteString(", arpress=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := a.Wndspd; v != nil {
		builder.WriteString(", wndspd=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := a.Rhum; v != nil {
		builder.WriteString(", rhum=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := a.Feeltmp; v != nil {
		builder.WriteString(", feeltmp=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", text=")
	builder.WriteString(a.Text)
	builder.WriteByte(')')
	return builder.String()
}

// Alerts is a parsable slice of Alert.
type Alerts []*Alert

func (a Alerts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
