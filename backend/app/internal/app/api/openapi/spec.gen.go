// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX32/bRBz/V6KDx5A4TbqmfhuZiiZE2cOEEKMiJr40Rv5xO5+3RlWknDtG6TpAm0aW",
	"Fikwuqxl0lrQYFnbsT/mYpc87V9Ad3aaZnZCN8TLyEvyte/u8/3pz8deBiXLQJYJTWIDeRnYpQo0FGGe",
	"1SEm3EDYQhATDYrbCkYY2sJUoV3CGiKaZQIZ+HsN74cHcqKYKSbeSfQe3g1uJIpT4rq+4XU6iWKWX3Sf",
	"fRMsfmqCJCBVBIEMNJPARYhBLQnKEOrEQFEf3We3/Wstf6/hd3b6nl4ctkIfwsqG1ghoTeWocEkxkM6X",
	"pMzczCdzMx8XpgqF3PT8hYvn8hc/mJv7KHd2cNwmWDMX+WldIdGgjp7sevttkBygZqdTZ2bOzObz2SQo",
	"W9jgp0BZtxQyADUd4/MgJJ2jREB/X38JNJOdTc1M5/O52dnToOKKY8Q06elzb7/9eqUjMK4lQTNOBjol",
	"pXKniZDApZhq9uobR6373vUvvUdPT6ICRtcY3WXuKqPXXxzS7sGa37jP6G5vc5vR9V7zJqM/M9pm9Bpz",
	"b/Btdddz7zL3lr9OGd0KDjL6kNHGMUhcj4lGuL+TQzLsosXoNqM3/TtNRlcZbY/AuWqqNlJjEry33au3",
	"Xq8FV5eieN7Wjr/X6OP5zcchnr/5VYjX29xOFHOB9SRRnA6sX2J98MmBlx0NQxXIl/jj0q9IMP3BuIbN",
	"W6jx/ZpZtqJhiXbdYO7t7v6q9+OvxzBxK1cgtoNTmZTE87QQNBWkARlkU1JKAkmAFFIRpJNWOC8JcxGK",
	"+eHspHCv51Ugg/cgORvs4IewYkACsQ3kS5EAVzbYyiFzO/6dPcCzADK47EBcBUlgKgaPFCmLPO+AFLmr",
	"aLVeRs0cwzLq8llx1xh91O2s9ZrfjXaka4ZGxnta4I2xkWXaAQ9PSRL/K1kmgaaog4KQrpVEJdJf2AGp",
	"DAA1Ag1x8G0My0AGb6UHzJ8OaT8dcH7teCwUjJUqEF0eTvPD98Wo2I5hKLjKq+neYys7PPOV1W6n/lf7",
	"gfft996fDQ6GLDumURcse9ApPnPQJu9aavWVsnqjtGmiLhN1+V+py1hhqUUIL/NK1HAKnovyWgFDhUB1",
	"DLkdNQ9667+JDaEUpZfF/2eaWgvqp0MCo3x3TtwPGE/8nldBJMVctAPzVqIQ5jw6Km/ra3/zsSDbYc0T",
	"asPFcyA2/WjByWYQ7MAY/ekPHJcf5MSxuEOiKU24fMLlEy5/07k8lqOl/56jx7579omQ07NpEa0cOh/7",
	"wTA/tPFf5jRMYyXLMUfOLnNv9eq0+/wnPmm01T34I/hEiCv1P1YhfBzCt26xBvGVvg44WAcyqBCC5HRa",
	"t0qKXrFsIuelvARqC7W/AwAA//+2i2z1CBIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

