// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX224bRRh+FWvg0vgQO42zd6mroApRKlEhRInw1DuOF+1hOjvbxooseTalhDQFRFVc",
	"J0hGJXUTKjUBFdVNU3iY8W7wVV8BzYwPSXcTlXJXfBP/Ozv/9x/zfdplUHYs7NjIpi7QloFbriILSnPO",
	"RIQKAxMHI0INJI8hwQS50tSRWyYGpoZjAw2Ee83gp4daopQtJd5L9B/dUweJ0pR8bmwE3W6ilBMPvRff",
	"qpef2yAJaA0joAHDpmgREVBPggpCJrVwNEbvxZ3wRjvca4bdnWGklwftQQxp5QbWCdCGLlDRErSwKV5l",
	"svMzn83PfFqcKhbz0xcuXjpXuPTh/Pwn+bmxu0uJYS8KbxPSaFKHT3eD/Q5IjlFz06kzM2dmC4VcElQc",
	"YgkvUDEdSMegtmddUSmZAiUC+sf6K6DZ3GxqZrpQyM/Ovg4qqXpWzJCe/RXsd96sdRTFjUQN42iiU5lU",
	"/nUypGgpppv9xsZh+0Fw86vg8bOjqICzNc52ub/K2c2XB6z3fC1sPuBst7+5zdl6v3Wbs18463B2g/u3",
	"xLWGH/j3uP9DuM4421KOnD3irDkCiZsxNaiId3RJjodoc7bN2e3wbouzVc46J+Bct3UX6zEF3t/uN9pv",
	"NoLrS1G8YGsn3GsO8cLWkwFeuPn1AK+/uZ0o5ZX1NFGaVtavsTHE5qCrnkGQDrTL4t9l2BG1/WpdB8Nb",
	"ENddVPaIQWsfC+pQHHEWQYLIiE9EgCvqaBSwSikGdeFv2BUnWpWc9i3u3+ntrwY//zbKIu7NNURc5ZVN",
	"ZUSbHIxsiA2ggVwqk8qAJMCQVmVqaShoTZqLSK6fIDcoop7XgQbeR3RO3RBOBFqIIuIC7XIkwZUNvnLA",
	"/W54dw+IKoAGrnqI1EAS2FDWjOGiaJviVBEq2uxXUbMjWM58sWr+GmePe921fuv7kwOZhmXQ0yMtiLm6",
	"2LFdNaKpTEb8lB2bIlv2AWJsGmXZifSXruKkMaBBkSUd3yWoAjTwTnosHOmBaqSVZNRHQ4aEwJqa8vEy",
	"P/pAbprrWRYkNdFN/z5f2RGVr6z2uo2/Ow+D734M/mwKMOy4MYO66LjjSYmVRS496+i1f1XVWyVtE3Ga",
	"iNP/SpxO0yV19xjhZaPpFQmCFOmnkNFh63l//Xd5YSAd6WX5+4Wh1xWgiSiK8tM5ea4YSv49r4NISvlo",
	"ShecRHFAXydnFWx9E24+keR4XKOkOgixG4vDMFtwtHmUeChGL4YLIuQCe3Gs69FoSRPunXDvhHvfdu6N",
	"5dT/SmDqA4JcG/KXR8zBx4GWTptOGZpVx6VaIVPIgPpC/Z8AAAD///BPo26vEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

