// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVXW8bRRT9K9aFx8Ufsd04+5a6CqoQpRIVQoQIT7zjeNF+dXa2jRVZ8m5KCWkKiKq4",
	"TpCMSuomVGoCKqqbpvBjxrvBT/0LaGb8kXSdKoDaF/t6Pffec849c3cFyrbp2Ba2qAvqCrjlKjaRCGcN",
	"TCgPHGI7mFAdi8eIOAS7ItSwWya6Q3XbAhWi/Wb400M1UcqUEu8l+o/uyQeJ0pT43dgMu91EKct/9F58",
	"K//83AIFsOWZoM5nlCklu6CA5RkGWjQwqJR4WAFaczCooFsUL2ECdQUqGBvUdOIQei/uRDfa0X4z6u4O",
	"gbw8bA8giCg7iP5bZ13jTfEyMh1+DNKZuenP5qY/LU4Vi7n8pctXLhSufDg390luFkbpLiW6tcSzDUTj",
	"mI+e7oUHHQ5mWDWbT56bPjdTKGQVqNjE5FlQMWxEx0Utz1yUkAxeJVb0j41XimayM8npfKGQm5k5S1VS",
	"5crERvzsr/Cg80aUpXjSQOUoj/OYSidzZyFA8fIEsfuNzaP2g/DmV+HjZ8erAvPXmb/HgjXm33x56Pee",
	"r0fNB8zf62/tMH+j37rN/F+Y32H+DRbc4scaQRjcY8EP0YbP/G2ZyPxHzG+OikyyANUp73fcQydbtJm/",
	"w/zb0d0W89eY3zmlznVLcx1tAsH7O/1G+41M6PpyvF24vRvtN4ftotaTQbto6+tBu/7WTqKUk9HTRCkv",
	"o19jEJSckj8DDG5NfNXTCdZAnef3caipvF7yPgzGv8CPu7jsEZ3WPuabTa6w8xgRTEbrjjdYlI9GDauU",
	"OlDn+bpVsePEhV9useBO72At/Pm3EYpJ/1zDxJVZmWSaK2k72EKODipkk+lkGhRwEK0KaCnEt64Il7Aw",
	"MN+9iHe9qIEK72M6K0/wJIJMTDFxQZ2PAVzdZKuHLOhGd/eBswAVrnqY1EABCwnODlrissmVz1vFxX61",
	"amZUlvkBN2uwzvzHve56v/X96Y0M3dTp6zst8Lm6jm25ckRT6TT/KtsWxZbQATmOoZeFEqkvXbn0xgV1",
	"ik2R+C7BFVDhndT4vZYavNRS8o1WHw0ZEYJqcsonaX70gXCa65kmIjWuZnCfre5y5qtrvW7j787D8Lsf",
	"wz+bvJhjuxMGddl2x5PilsUuPW9rtX/F6gxk6vJKnJAuE/drkWBEsfYaWket5/2N38WBgQlTK+L7C12r",
	"y4IGpjjO9IJ4LrmKz4saxCDl4pAu2YniQIjTUYXb30RbT4TMJ90ufMavzdhmQ7RwfEfINRJz3nCTcuM5",
	"3qT5eTRO6a1O8f9KJpcfuTZUzCPGYLGpqZRhl5FRtV2qFtKFNNQX6v8EAAD//4ylYFgKCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

