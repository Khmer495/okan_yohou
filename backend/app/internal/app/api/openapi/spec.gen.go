// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWbW8bRRD+K9bCx8M+vzXOfWtdBVWIUokKIUqEN76Jfehelr29NlZkyeeUEtoUJCpw",
	"0yAZldRNqEQCKmqapvBj1nfBn/oX0O6enTTnoqCq+MPt3N7OzPM8szvrZVT3HOK54DIfGcvIrzfBwdI8",
	"awNlwiDUI0CZBXLaMsUTlrBDbEAG0vNzM5/MzXxcLVSrpfLFS5fPVy6/Pzf3Ueks0hBrEbHGZ9RyG6it",
	"IdurY2Z5bjqujWUyE/w6tYhagw6f7ET7A6Qd5SuWs2dmzsxWKkUNLXrUEV7I9IIFG47yuYGzAFTlc6dE",
	"/WPtRNR8cTY7U65USrOzpwjbbmuIwdIUvKPOvcP+g+jGl9GvT4/HRzy8ycMd3l3l4Y0XB+Hw2c2494CH",
	"O6ONLR6ujdZv8/BnHg54eJ13b4llnW7Uvcu738VrIQ83lSMPH/GwNwkyTV9mMZHveIFeTtHn4RYPb8ff",
	"r/NwlYeDV8WhVqMBNF0mTAkF309Tj3d70Y8PjUwtX8u8kxk9uqsmMrWCfO/ci/b2MrWieBk+/0Z9/NQV",
	"IrmBg4wrea2gFTU3sO15DYkBC+0NRgOY4LNcBg1V2EUAmzkkjWP4/E58vR/v9uK97TGaFwf9BIe0ion1",
	"GulpU3ilNHj6V7Q/eHNZGUxjrLge324FPVs61fG45po+Mafs4/tbo07/zRG5tpTOGW1ux7u9cc54/XGS",
	"M974Ksk52tjK1ErKepKplZX1SxpHSSufFov8aciHekAt1vpQ9D+1088BpuoEyKYovBbU1CRKkzGi2oHl",
	"LnppSvLU3+LdO8P91ein39DkfE75chWor7zyWV1o5BFwMbGQgYpZPasjDRHMmhJaDoveLM0GyDYkjqhs",
	"rBdMZKB3gZ1VKzREwSee6ytOBV0XQ91zGbjSERNiW6on5z73VbdUl4Bs9gwc6fg2hUVkoLdyR9dFLrkr",
	"cuqiaE9UwZTilpLlZTk+eA9JrQPHwbQlVOje5yvbfOWAr6wO9zp/Dx5G3/4Q/dkTwYjnT2F2yfOPU/si",
	"AJ+d88zWf2J1CjIS/Qnp8ukCVylgBua/0DpcfzZa+10uSKqWW5bjZ5bZVgFtYJBmel7OK67yecFMV7OU",
	"hnTRy1QTIV6NKtr8Ot54LGXGFDvAgPrIuLKMLBFC7DOkIRfLTT9GmwhuUTDHh+lI0hMXSHteQySYVr+A",
	"pSn9r1V8XclUt6BXx4oF1E46gZHLib83dtPzmVHRKzpqz7f/CQAA//+YU0XeYQkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

