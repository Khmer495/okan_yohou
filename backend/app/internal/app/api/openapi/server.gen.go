// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// アラート一覧取得
	// (GET /alerts)
	GetAlerts(ctx echo.Context, params GetAlertsParams) error
	// アラート登録
	// (POST /alerts)
	PostAlerts(ctx echo.Context) error
	// アラート変更
	// (DELETE /alerts/{alert_id})
	DeleteAlertsAlertId(ctx echo.Context, alertId string) error
	// アラート変更
	// (PUT /alerts/{alert_id})
	PutAlertsAlertId(ctx echo.Context, alertId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAlerts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlerts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlertsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlerts(ctx, params)
	return err
}

// PostAlerts converts echo context to params.
func (w *ServerInterfaceWrapper) PostAlerts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAlerts(ctx)
	return err
}

// DeleteAlertsAlertId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAlertsAlertId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alert_id" -------------
	var alertId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "alert_id", runtime.ParamLocationPath, ctx.Param("alert_id"), &alertId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alert_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAlertsAlertId(ctx, alertId)
	return err
}

// PutAlertsAlertId converts echo context to params.
func (w *ServerInterfaceWrapper) PutAlertsAlertId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alert_id" -------------
	var alertId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "alert_id", runtime.ParamLocationPath, ctx.Param("alert_id"), &alertId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alert_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAlertsAlertId(ctx, alertId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/alerts", wrapper.GetAlerts)
	router.POST(baseURL+"/alerts", wrapper.PostAlerts)
	router.DELETE(baseURL+"/alerts/:alert_id", wrapper.DeleteAlertsAlertId)
	router.PUT(baseURL+"/alerts/:alert_id", wrapper.PutAlertsAlertId)

}

